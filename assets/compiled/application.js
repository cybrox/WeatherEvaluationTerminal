// Generated by CoffeeScript 1.7.1
(function() {
  var App;

  App = Ember.Application.create({
    LOG_TRANSITIONS: true
  });

  App.GraphCanvasComponent = Ember.Component.extend({
    tagName: 'canvas',
    didInsertElement: function() {
      var canvas, chart, context, data, jqcanv;
      canvas = this.get('element');
      jqcanv = $(canvas);
      context = canvas.getContext('2d');
      canvas.width = jqcanv.parent().width();
      canvas.height = jqcanv.parent().height();
      data = {
        labels: this.generateLables(),
        datasets: this.get('data')
      };
      return chart = new Chart(context)[this.get('type')](data);
    },
    generateLables: function() {
      var h, i, lables, m, _i, _j, _k, _ref;
      lables = [];
      if (this.get('range') === 'month') {
        lables = ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'];
      }
      if (this.get('range') === 'day') {
        for (h = _i = 0; _i < 24; h = ++_i) {
          for (m = _j = 0; _j < 60; m = _j += 15) {
            lables.push(this.stp(h) + ':' + this.stp(m));
          }
        }
        for (i = _k = 0, _ref = lables.length; _k <= _ref; i = _k += 2) {
          lables[i - 1] = "";
        }
      }
      return lables;
    },
    stp: function(num) {
      if (parseInt(num) < 10) {
        num = "0" + num;
      }
      return num;
    }
  });

  App.ApplicationController = Ember.Controller.extend({
    newWarnings: (function() {
      return 10;
    }).property(),
    hasWarnings: (function() {
      return this.get('newWarnings') > 0;
    }).property('newWarnings')
  });

  App.NotificationsController = Ember.Controller.extend();

  App.WeatherController = Ember.Controller.extend({
    monthList: ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'],
    dataset: [
      {
        fillColor: "rgba(220,220,220,0.5)",
        strokeColor: "rgba(220,220,220,1)",
        pointColor: "rgba(220,220,220,1)",
        pointStrokeColor: "#fff",
        data: [65, 59, 90, 81, 56, 55, 40]
      }, {
        fillColor: "rgba(151,187,205,0.5)",
        strokeColor: "rgba(151,187,205,1)",
        pointColor: "rgba(151,187,205,1)",
        pointStrokeColor: "#fff",
        data: [28, 48, 40, 19, 96, 27, 100]
      }
    ],
    currentMonth: (function() {
      var monthList;
      monthList = this.get('monthList');
      return monthList[parseInt(this.get('month')) - 1] + " " + this.get('year');
    }).property('year', 'month'),
    prevMonth: (function() {
      var monthList, thisMonth;
      monthList = this.get('monthList');
      thisMonth = parseInt(this.get('month'));
      if (thisMonth === 1) {
        thisMonth = 13;
      }
      return monthList[thisMonth - 2];
    }).property('month'),
    nextMonth: (function() {
      var monthList, thisMonth;
      monthList = this.get('monthList');
      thisMonth = parseInt(this.get('month'));
      if (thisMonth === 12) {
        thisMonth = 0;
      }
      return monthList[thisMonth];
    }).property('month'),
    strPad: function(num) {
      if (parseInt(num) < 10) {
        return "0" + num;
      } else {
        return num;
      }
    },
    actions: {
      goPrev: function() {
        var month, year;
        month = parseInt(this.get('month')) - 1;
        year = parseInt(this.get('year'));
        if (month === 0) {
          month = 12;
          year -= 1;
        }
        this.setProperties({
          'year': year,
          'month': month
        });
        return this.transitionToRoute('weather', year, this.strPad(month));
      },
      goNext: function() {
        var month, year;
        month = parseInt(this.get('month')) + 1;
        year = parseInt(this.get('year'));
        if (month === 13) {
          month = 1;
          year += 1;
        }
        this.setProperties({
          'year': year,
          'month': month
        });
        return this.transitionToRoute('weather', year, this.strPad(month));
      }
    }
  });

  App.Router.map(function() {
    this.route('notifications');
    return this.route('weather', {
      path: '/weather/:year/:month'
    });
  });

  App.IndexRoute = Ember.Route.extend({
    beforeModel: function() {
      return this.transitionTo('weather', this.getCurrentYear(), this.getCurrentMonth());
    },
    getCurrentYear: function() {
      var currentDate;
      currentDate = new Date();
      return currentDate.getFullYear();
    },
    getCurrentMonth: function() {
      var currentDate, currentMonth;
      currentDate = new Date();
      currentMonth = currentDate.getMonth() + 1;
      if (currentMonth < 10) {
        currentMonth = "0" + currentMonth;
      }
      return currentMonth;
    }
  });

  App.WeatherRoute = Ember.Route.extend({
    model: function(params) {
      this.set('year', params.year);
      return this.set('month', params.month);
    },
    setupController: function(controller, model) {
      this._super(controller, model);
      return this.controllerFor('weather').setProperties({
        'year': this.get('year'),
        'month': this.get('month')
      });
    }
  });

}).call(this);
