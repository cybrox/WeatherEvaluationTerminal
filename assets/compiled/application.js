// Generated by CoffeeScript 1.7.1
(function() {
  var App;

  App = Ember.Application.create({
    LOG_TRANSITIONS: true
  });

  App.GraphCanvasComponent = Ember.Component.extend({
    tagName: 'canvas',
    canvas: null,
    context: null,
    didInsertElement: function() {
      var canvas, context, jqcanv;
      canvas = this.get('element');
      jqcanv = $(canvas);
      context = canvas.getContext('2d');
      this.setProperties({
        'canvas': canvas,
        'context': context
      });
      canvas.width = jqcanv.parent().width();
      canvas.height = jqcanv.parent().height();
      return this.initializeGraph();
    },
    initializeGraph: function() {
      if (this.get('gtype') !== void 0) {
        if (this.get('gtype') === 'line') {
          this.set('chart', new Chart(this.get('context')).Line(this.get('gdata'), this.get('goptions')));
        }
        if (this.get('gtype') === 'radar') {
          return this.set('chart', new Chart(this.get('context')).Radar(this.get('gdata'), this.get('goptions')));
        }
      } else {
        return console.log('invalid graph type specified.');
      }
    }
  });

  App.ApplicationController = Ember.Controller.extend({
    newWarnings: (function() {
      return 10;
    }).property(),
    hasWarnings: (function() {
      return this.get('newWarnings') > 0;
    }).property('newWarnings')
  });

  App.NotificationsController = Ember.Controller.extend();

  App.WeatherController = Ember.Controller.extend({
    monthList: ['Januar', 'Februar', 'MÃ¤rz', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'],
    currentMonth: (function() {
      var monthList;
      monthList = this.get('monthList');
      return monthList[parseInt(this.get('month')) - 1] + " " + this.get('year');
    }).property('year', 'month'),
    prevMonth: (function() {
      var monthList, thisMonth;
      monthList = this.get('monthList');
      thisMonth = parseInt(this.get('month'));
      if (thisMonth === 1) {
        thisMonth = 13;
      }
      return monthList[thisMonth - 2];
    }).property('month'),
    nextMonth: (function() {
      var monthList, thisMonth;
      monthList = this.get('monthList');
      thisMonth = parseInt(this.get('month'));
      if (thisMonth === 12) {
        thisMonth = 0;
      }
      return monthList[thisMonth];
    }).property('month'),
    strPad: function(num) {
      if (parseInt(num) < 10) {
        return "0" + num;
      } else {
        return num;
      }
    },
    actions: {
      goPrev: function() {
        var month, year;
        month = parseInt(this.get('month')) - 1;
        year = parseInt(this.get('year'));
        if (month === 0) {
          month = 12;
          year -= 1;
        }
        this.setProperties({
          'year': year,
          'month': month
        });
        return this.transitionToRoute('weather', year, this.strPad(month));
      },
      goNext: function() {
        var month, year;
        month = parseInt(this.get('month')) + 1;
        year = parseInt(this.get('year'));
        if (month === 13) {
          month = 1;
          year += 1;
        }
        this.setProperties({
          'year': year,
          'month': month
        });
        return this.transitionToRoute('weather', year, this.strPad(month));
      }
    }
  });

  App.Router.map(function() {
    this.route('notifications');
    return this.route('weather', {
      path: '/weather/:year/:month'
    });
  });

  App.IndexRoute = Ember.Route.extend({
    beforeModel: function() {
      return this.transitionTo('weather', this.getCurrentYear(), this.getCurrentMonth());
    },
    getCurrentYear: function() {
      var currentDate;
      currentDate = new Date();
      return currentDate.getFullYear();
    },
    getCurrentMonth: function() {
      var currentDate, currentMonth;
      currentDate = new Date();
      currentMonth = currentDate.getMonth() + 1;
      if (currentMonth < 10) {
        currentMonth = "0" + currentMonth;
      }
      return currentMonth;
    }
  });

  App.WeatherRoute = Ember.Route.extend({
    model: function(params) {
      this.set('year', params.year);
      return this.set('month', params.month);
    },
    setupController: function(controller, model) {
      this._super(controller, model);
      return this.controllerFor('weather').setProperties({
        'year': this.get('year'),
        'month': this.get('month')
      });
    }
  });

}).call(this);
